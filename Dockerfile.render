# -----------------------------------------
# 1) Etapa de build del frontend React
# -----------------------------------------
FROM node:16 AS frontend-builder

WORKDIR /opt/app

# Copiamos solo lo necesario para instalar deps
COPY package.json package-lock.json webpack.common.js webpack.prod.js webpack.dev.js public/ src/front/ ./
RUN npm ci && npm run build

# -----------------------------------------
# 2) Etapa de runtime del backend Flask
# -----------------------------------------
FROM python:3.10-slim AS backend

# Instala lo mínimo del sistema y limpia cachés
RUN apt-get update \
    && apt-get install -y --no-install-recommends build-essential \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /opt/app

# Crea virtualenv y activa
RUN python3 -m venv venv
ENV PATH="/opt/app/venv/bin:$PATH"

# Copia pipfiles y instala deps de Python
COPY requirements.txt Pipfile* ./
RUN pip install --upgrade pip \
    && pip install pipenv \
    && pipenv lock --requirements > requirements.txt 2>/dev/null || true \
    && pip install -r requirements.txt

# Copia el código de tu Flask
COPY src/ src/
COPY api/ api/
COPY app.py render.yaml render_build.sh template.html wsgi.py ./

# Copia el build generado por la etapa frontend-builder
COPY --from=frontend-builder /opt/app/build /opt/app/build

# Variables de entorno para Prerender
ENV PRERENDER_SERVICE_URL=https://service.prerender.io/
ENV PRERENDER_TOKEN=${PRERENDER_TOKEN}

# Expone el puerto de Flask
EXPOSE 3001

# Arranca con Gunicorn
CMD ["gunicorn", "app:app", "--workers", "3", "--bind", "0.0.0.0:3001", "--timeout", "120", "--keep-alive", "60"]
